#!/usr/bin/env python2
####################################################################################################################################################################################################################################################################
#                                                                                                                                                                                                                                                                  #
#                                                                                                                                                                                                                                                                  #
#        Copyright (C) 2019 AGNITAS AG (https://www.agnitas.org)                                                                                                                                                                                                   #
#                                                                                                                                                                                                                                                                  #
#        This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.    #
#        This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details.           #
#        You should have received a copy of the GNU Affero General Public License along with this program. If not, see <https://www.gnu.org/licenses/>.                                                                                                            #
#                                                                                                                                                                                                                                                                  #
####################################################################################################################################################################################################################################################################
#	-*- python -*-
#
import	sys, os, getopt, re
import	agn
#
def usage (msg = None):
	sys.stdout.write ("""Usage: %s [-n] [-q] [-l <lang>] [-c <company-id>] [-d <description] [-t <tag(s)>] [-T] <filename>
Function: inserts or updates script tag in database
Options:
\t-n               do not execute any database modifiaction
\t-q               quiet mode, do not output any information
\t-l <lang>        set this as the language of the script
\t                 (otherwise the file extension is used)
\t-c <company-id>  create the tag for this company-id (0 default)
\t-d <description> explaination for the code
\t-t <tag(s)>      list of agnTags to create or update in tag_tbl
\t                 it is possible to use a different function name
\t                 by separating it with a colon, e.g.:
\t                 ,,angTAG`` will call the function ,,tag``, but
\t                 ,,agnTAG:func`` will call the function ,,func``
\t                 an optional description may be appended using
\t                 another colon as separator
\t-T               only create/update tag(s)
\t-?, -h           this help 
""" % sys.argv[0])
	if msg:
		sys.stdout.write (msg + '\n')
		sys.exit (1)
	sys.exit (0)
	
def main ():
	doit = True
	quiet = False
	lang = None
	companyID = 0
	description = None
	tags = None
	tagOnly = False
	try:
		(opts, parm) = getopt.getopt (sys.argv[1:], 'nql:c:d:t:T?h')
	except getopt.error, e:
		usage (e.args[0])
	for opt in opts:
		if opt[0] == '-n':
			doit = False
		elif opt[0] == '-q':
			quiet = True
		elif opt[0] == '-l':
			lang = opt[1]
		elif opt[0] == '-c':
			companyID = int (opt[1])
		elif opt[0] == '-d':
			description = opt[1]
		elif opt[0] == '-t':
			for tag in [_t.strip () for _t in opt[1].split (',')]:
				if tag:
					if tags is None:
						tags = [tag]
					elif not tag in tags:
						tags.append (tag)
		elif opt[0] == '-T':
			tagOnly = True
		elif opt[0] in ('-?', '-h'):
			usage ()
	if len (parm) != 1:
		usage ('Exactly one file required')
	rc = 0
	fname = parm[0]
	(name, ext) = os.path.splitext (os.path.basename (fname))
	if ext.startswith ('.'):
		ext = ext[1:]
	if lang is None:
		lang = ext.lower ()
	db = agn.DBaseID ()
	if db is None:
		raise agn.error ('Unable to setup database interface')
	cursor = db.cursor ()
	if cursor is None:
		raise agn.error ('Unable to open database: %s' % db.lastError ())
	if not tagOnly:
		fd = open (fname, 'r')
		code = fd.read ()
		fd.close ()
		if code.startswith ('#!'):
			n = code.find ('\n')
			if n != -1:
				code = code[n + 1:].lstrip ()
		cutter = re.compile ('\n[^\n]*%%\n')
		parts = cutter.split (code)
		if len (parts) > 1:
			code = parts[0]
		fid = cursor.querys ('SELECT tag_function_id, lang, description, code FROM tag_function_tbl WHERE name = :name AND company_id = :companyID', {'name': name, 'companyID': companyID})
		if fid is None:
			data = {'name': name, 'companyID': companyID, 'lang': lang, 'code': code, 'tdesc': description}
			query = cursor.rselect (cursor.qselect (
				oracle = 'INSERT INTO tag_function_tbl (tag_function_id, company_id, creation_date, timestamp, name, lang, description, code) VALUES (tag_function_tbl_seq.nextval, :companyID, %(sysdate)s, %(sysdate)s, :name, :lang, :tdesc, :code)',
				mysql = 'INSERT INTO tag_function_tbl (company_id, creation_date, timestamp, name, lang, description, code) VALUES (:companyID, %(sysdate)s, %(sysdate)s, :name, :lang, :tdesc, :code)'
			))
			if doit:
				if db.dbms == 'oracle':
					cursor.setInputSizes (code = agn.cx_Oracle.CLOB)
				rows = cursor.execute (query, data)
				if rows == 1:
					if not quiet:
						print ('%s: code inserted setting language to "%s" for company %d' % (name, lang, companyID))
				else:
					print ('%s: FAILED to insert code into database: %s' % (name, db.lastError ()))
					rc = 1
			else:
				print ('%s: Would execute %s using %r' % (name, query, data))
		elif fid[1] == lang and str (fid[3]) == code and (description is None or description == fid[2]):
			if not quiet:
				print ('%s: no change' % name)
		else:
			data = {'fid': fid[0], 'lang': lang, 'code': code}
			if not description is None:
				data['tdesc'] = description
				extra = ', description = :tdesc'
			else:
				extra = ''
			query = cursor.rselect (cursor.qselect (
				oracle = 'UPDATE tag_function_tbl SET code = :code, lang = :lang, timestamp = %%(sysdate)s%s WHERE tag_function_id = :fid' % extra,
				mysql = 'UPDATE tag_function_tbl SET code = :code, lang = :lang, timestamp = %%(sysdate)s%s WHERE tag_function_id = :fid' % extra
			))
			if doit:
				if db.dbms == 'oracle':
					cursor.setInputSizes (code = agn.cx_Oracle.CLOB)
				rows = cursor.update (query, data)
				if rows == 1:
					if not quiet:
						print ('%s: code updated using language "%s"' % (name, lang))
				else:
					print ('%s: FAILED to update code: %s' % (name, db.lastError ()))
					rc = 1
			else:
				print ('%s: Would execute %s using %r' % (name, query, data))
	if tags:
		for tag in tags:
			parts = tag.split (':', 2)
			cdesc = name
			tdesc = None
			if len (parts) > 1:
				tag = parts[0]
				if parts[1]:
					cdesc = '%s:%s' % (name, parts[1])
				if len (parts) == 3 and parts[2]:
					tdesc = parts[2]
			data = {'cdesc': cdesc}
			tid = cursor.querys ('SELECT tag_id, type, selectvalue, description FROM tag_tbl WHERE tagname = :tname AND company_id = :companyID', {'tname': tag, 'companyID': companyID})
			if tid is None:
				data['type'] = 'FUNCTION'
				data['tname'] = tag
				data['companyID'] = companyID
				if tdesc is None:
					tdesc = 'Created by script-tag'
				data['tdesc'] = tdesc
				query = cursor.rselect (cursor.qselect (
					oracle = 'INSERT INTO tag_tbl (tag_id, tagname, selectvalue, type, company_id, description, timestamp) VALUES (tag_tbl_seq.nextval, :tname, :cdesc, :type, :companyID, :tdesc, %(sysdate)s)',
					mysql = 'INSERT INTO tag_tbl (tagname, selectvalue, type, company_id, description, change_date) VALUES (:tname, :cdesc, :type, :companyID, :tdesc, %(sysdate)s)'
				))
				if doit:
					rows = cursor.execute (query, data)
					if rows == 1:
						if not quiet:
							print ('Tag %s: inserted into database' % tag)
					else:
						print ('Tag %s: FAILED to insert into database: %s' % (tag, db.lastError ()))
						rc = 1
				else:
					print ('Tag %s: Would execute %s using %r' % (tag, query, data))
			elif tid[2] == cdesc and (tdesc is None or tid[3] == tdesc):
				if not quiet:
					print ('Tag %s: no change' % tag)
			else:
				data['tid'] = tid[0]
				if not tdesc is None:
					data['tdesc'] = tdesc
					extra = ', description = :tdesc'
				else:
					extra = ''
				if tid[1] != 'FUNCTION':
					if not quiet:
						print ('Tag %s: modify type from %r' % (tag, tid[1]))
					data['type'] = 'FUNCTION'
					extra += ', type = :type'
				query = cursor.rselect (cursor.qselect (
					oracle = 'UPDATE tag_tbl SET selectvalue = :cdesc, timestamp = %%(sysdate)s%s WHERE tag_id = :tid' % extra,
					mysql = 'UPDATE tag_tbl SET selectvalue = :cdesc, change_date = %%(sysdate)s%s WHERE tag_id = :tid' % extra
				))
				if doit:
					rows = cursor.update (query, data)
					if rows == 1:
						if not quiet:
							print ('Tag %s: updated' % tag)
					else:
						print ('Tag %s: FAILED to update: %s' % (tag, db.lastError ()))
						rc = 1
				else:
					print ('Tag %s: Would execute %s using %r' % (tag, query, data))
	cursor.sync (doit)
	cursor.close ()
	db.close ()
	if rc:
		sys.exit (rc)
#
if __name__ == '__main__':
	main ()
